-- VALIDATE: atomicity
  - if all packages are valid perform the link/unlink operation

-- VALIDATE packages:
  - are not duplicated. What to do them? (ignore, error, warning)

- GENERATE: config file by scanning a directory and creating a package for each file

- GENERATE: config file with default values (common configurations) with `pono init`

- CROSS-SYSTEM:
  example of a symlink creation function that works on both unix and windows
  ```rust
    fn create_symlink(source: &Path, target: &Path) -> io::Result<()> {
      #[cfg(target_family = "unix")]
      std::os::unix::fs::symlink(source, target)?;

      #[cfg(target_family = "windows")]
      std::os::windows::fs::symlink_file(source, target)?;

      Ok(())
  }
  ```

- CONFIG: adds dinamic values to the config file for instance $(which command)

- VALIDATE: Cyclic Links: 
  Avoid creating symbolic links that point back to themselves or create a loop between directories.
Link Existence:

- COMPLETIONS: sort by most relevant

- DOCS/EXAMPLES example of issues with stow
  "I recently switched to Nix and used stow before, I always had the issue that stow would create a symlink to a directory if that didn't exist, meaning if an app placed another file into the linked directory it would suddenly be in my dotfiles."
  https://archive.ph/yNxU1

FEAT: add '--expand' flag to expand environment variables

FEAT: allow add pono description and help

FEAT: adds pono groups. Usage: managing dotfiles for osx/linux/windows
